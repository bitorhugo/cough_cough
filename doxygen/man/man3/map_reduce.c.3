.TH "map_reduce/map_reduce.c" 3 "Tue Jun 7 2022" "cough_cough" \" -*- nroff -*-
.ad l
.nh
.SH NAME
map_reduce/map_reduce.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include <pthread\&.h>\fP
.br
\fC#include 'map_reduce\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "_Noreturn void * \fBhash_consumer\fP (void *args)"
.br
.ti -1c
.RI "void * \fBhash_producer\fP (void *args)"
.br
.ti -1c
.RI "void \fBmap_reduce\fP (int N_producers, int N_consumers, \fBDATASET\fP *data, int fd_out)"
.br
.ti -1c
.RI "int \fBhash\fP (const uint32_t admission, int N)"
.br
.ti -1c
.RI "void \fBlaunch_semaphores\fP (int N)"
.br
.ti -1c
.RI "void \fBoccupation_v4\fP (uint32_t admission_line, const \fBCONSUMER_HASH_DATA\fP *chd)"
.br
.ti -1c
.RI "void \fBH_write_to_fd\fP (const \fBCONSUMER_HASH_DATA\fP *chd, uint32_t admission_line, int *\fBoccupation\fP)"
.br
.ti -1c
.RI "void \fBfree_map_reduce\fP ()"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "semaphore_t * \fBe\fP = NULL"
.br
.ti -1c
.RI "semaphore_t * \fBf\fP = NULL"
.br
.ti -1c
.RI "\fBSHARED_DT_HASH\fP * \fBbuffers\fP = NULL"
.br
.ti -1c
.RI "pthread_mutex_t \fBmutexx\fP = PTHREAD_MUTEX_INITIALIZER"
.br
.ti -1c
.RI "pthread_mutex_t \fBH_fd_mutex\fP = PTHREAD_MUTEX_INITIALIZER"
.br
.ti -1c
.RI "int * \fBusee\fP = NULL"
.br
.ti -1c
.RI "int * \fBfilll\fP = NULL"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "void free_map_reduce ()"
deallocates mem for dynamic dts used 
.SS "void H_write_to_fd (const \fBCONSUMER_HASH_DATA\fP * chd, uint32_t admission_line, int * occupation)"
writes to file the reduced solution 
.PP
\fBParameters:\fP
.RS 4
\fIchd\fP data 
.br
\fIadmission_line\fP line number 
.br
\fIoccupation\fP number of people in the room 
.RE
.PP

.SS "int hash (uint32_t admission, int N)"
computes the hash to know to which buffer to send admission 
.PP
\fBParameters:\fP
.RS 4
\fIadmission\fP admission to hash 
.br
\fIN\fP number of buffers 
.RE
.PP
\fBReturns:\fP
.RS 4
id of buffer to send admission line 
.RE
.PP

.SS "_Noreturn void* hash_consumer (void * args)"
consumer will calculate occupation of admission in buffers[id][use] 
.PP
\fBParameters:\fP
.RS 4
\fIargs\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
NULL 
.RE
.PP

.SS "void* hash_producer (void * args)"
producers will compute hash and write admission to buffer with id == hash 
.PP
\fBParameters:\fP
.RS 4
\fIargs\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
.RE
.PP

.SS "void launch_semaphores (int N)"
launch semaphores for shared buffers 
.PP
\fBParameters:\fP
.RS 4
\fIN\fP number of buffers 
.RE
.PP

.SS "void map_reduce (int N_producers, int N_consumers, \fBDATASET\fP * data, int fd_out)"
use of map reduce paradigm 
.PP
\fBParameters:\fP
.RS 4
\fIN_producers\fP number of producer threads 
.br
\fIN_consumers\fP number of reducer threads 
.br
\fIdata\fP data to reduce 
.br
\fIfd_out\fP file descriptor to write to 
.RE
.PP

.SS "void occupation_v4 (uint32_t admission_line, const \fBCONSUMER_HASH_DATA\fP * chd)"
calculates the occupation given the line number and data 
.PP
\fBParameters:\fP
.RS 4
\fIadmission_line\fP line number 
.br
\fIchd\fP data 
.RE
.PP

.SH "Variable Documentation"
.PP 
.SS "\fBSHARED_DT_HASH\fP* buffers = NULL"

.SS "semaphore_t* e = NULL"

.SS "semaphore_t* f = NULL"

.SS "int* filll = NULL"

.SS "pthread_mutex_t H_fd_mutex = PTHREAD_MUTEX_INITIALIZER"

.SS "pthread_mutex_t mutexx = PTHREAD_MUTEX_INITIALIZER"

.SS "int* usee = NULL"

.SH "Author"
.PP 
Generated automatically by Doxygen for cough_cough from the source code\&.
